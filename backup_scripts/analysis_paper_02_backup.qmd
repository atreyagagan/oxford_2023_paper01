---
title: "Data Analysis and Visualization <br> Paper 2: Community Data for 4 countries <br> WORK IN PROGRESS"
author: Gagan Atreya 
date: today
format:
  html:
    toc: true
    toc-location: left
    toc-depth: 4
    theme: lumenR
    fontsize: large
    code-fold: true
    code-tools: true
    code-summary: "Display code"
    code-overflow: wrap
editor: 
  markdown: 
    wrap: 72
---

# **Section 1. Data cleaning and Demographics**

```{r, error = F, message=F, warning = F}

## clear environment:
rm(list=ls())
options(digits = 2)

## Correct asterisk pattern for stargazer tables:
starpattern <- "<em>&#42;p&lt;0.05;&nbsp;&#42;&#42;p&lt;0.01;&nbsp;&#42;&#42;&#42;p&lt;0.001</em>"

## Install "pacman" package if not installed
# (remove the # symbol from the line below):
# install.packages("pacman")

## Load R packages:
pacman::p_load(data.table, tidyverse, haven, labelled, vtable, 
               psych, scales, weights, clipr, forcats,
               stargazer, ggthemes, ggcharts, geomtextpath,
               corrplot, tm, readxl, patchwork, modelsummary,
               gt, lme4, car, lmerTest, 
               ggeffects, magrittr, broom, broom.mixed,
               backports, effects, interactions, plyr, sjPlot)

## Import datasets:
## These are newer datasets with new variables created in the individual analyses:
dsgmb <- fread("~/Dropbox/2023_Gagan/Paper02/data/dsgmb.csv")
dspak <- fread("~/Dropbox/2023_Gagan/Paper02/data/dspak.csv")
dstza <- fread("~/Dropbox/2023_Gagan/Paper02/data/dstza.csv")
dsuga <- fread("~/Dropbox/2023_Gagan/Paper02/data/dsuga.csv")

```


## Data cleaning

**Criteria:**

-   Survey duration:

not available for this dataset as it was manual interviews

-   Bad open ended responses:

not applicable since all are manual responses

-   SD on unrelated scales

- **INCOME VARIABLE**

**some cases with outlier responses in "income" variable need to be removed. THIS PART NEEDS TO BE REDONE**

-   Missing data in scales

## Missing data:

```{r, error = F, message=F, warning = F}

mds <- map(ds, ~mean(is.na(.))*100) 
mds <- as.data.frame(mds)
mds1 <- as_tibble(cbind(variable = names(mds), t(mds)))
mds1$percent_missing <- mds1$V2

mds1$percent_missing <- as.numeric(mds1$percent_missing)
summary(mds1$percent_missing)

mds2 <- select(mds1,-c(2))
mds2 <- as.data.frame(mds2)
mds2$percent_missing <- as.numeric(mds2$percent_missing)
mds2 <- as.data.table(mds2)
mds2a <- mds2[1:30,]
mds2b <- mds2[31:55,]

lp01 <- mds2a %>% 
  # drop_na(Country) %>%
  lollipop_chart(x = variable,
                 y = percent_missing,
               line_color = "black",
               point_color = "black")+
  labs(y = "Frequency",
       x = "",
       title = "% missing data")+
  theme_bw()

lp01

lp02 <- mds2b %>% 
  # drop_na(Country) %>%
  lollipop_chart(x = variable,
                 y = percent_missing,
               line_color = "black",
               point_color = "black")+
  labs(y = "Frequency",
       x = "",
       title = "% missing data")+
  theme_bw()

lp02

```

```{r, error = F, message=F, warning = F}
## Individual country datasets:
dsgmb <- ds[ds$Country == "Gambia", ]
dspak <- ds[ds$Country == "Pakistan", ]
dstza <- ds[ds$Country == "Tanzania", ]
dsuga <- ds[ds$Country == "Uganda", ]
```

## Missing data: Gambia

```{r, error = F, message=F, warning = F}
mds <- map(dsgmb, ~mean(is.na(.))*100) 
mds <- as.data.frame(mds)
mds1 <- as_tibble(cbind(variable = names(mds), t(mds)))
mds1$percent_missing <- mds1$V2

mds1$percent_missing <- as.numeric(mds1$percent_missing)
summary(mds1$percent_missing)

mds2 <- select(mds1,-c(2))
mds2 <- as.data.frame(mds2)
mds2$percent_missing <- as.numeric(mds2$percent_missing)
mds2 <- as.data.table(mds2)
mds2a <- mds2[1:30,]
mds2b <- mds2[31:55,]

lp01 <- mds2a %>% 
  # drop_na(Country) %>%
  lollipop_chart(x = variable,
                 y = percent_missing,
               line_color = "black",
               point_color = "black")+
  labs(y = "Frequency",
       x = "",
       title = "% missing data: Gambia")+
  theme_bw()

lp01

lp02 <- mds2b %>% 
  # drop_na(Country) %>%
  lollipop_chart(x = variable,
                 y = percent_missing,
               line_color = "black",
               point_color = "black")+
  labs(y = "Frequency",
       x = "",
       title = "% missing data: Gambia")+
  theme_bw()

lp02

```

## Missing data: Pakistan

```{r, error = F, message=F, warning = F}
mds <- map(dspak, ~mean(is.na(.))*100) 
mds <- as.data.frame(mds)
mds1 <- as_tibble(cbind(variable = names(mds), t(mds)))
mds1$percent_missing <- mds1$V2

mds1$percent_missing <- as.numeric(mds1$percent_missing)
summary(mds1$percent_missing)

mds2 <- select(mds1,-c(2))
mds2 <- as.data.frame(mds2)
mds2$percent_missing <- as.numeric(mds2$percent_missing)
mds2 <- as.data.table(mds2)
mds2a <- mds2[1:30,]
mds2b <- mds2[31:55,]

lp01 <- mds2a %>% 
  # drop_na(Country) %>%
  lollipop_chart(x = variable,
                 y = percent_missing,
               line_color = "black",
               point_color = "black")+
  labs(y = "Frequency",
       x = "",
       title = "% missing data: Pakistan")+
  theme_bw()

lp01

lp02 <- mds2b %>% 
  # drop_na(Country) %>%
  lollipop_chart(x = variable,
                 y = percent_missing,
               line_color = "black",
               point_color = "black")+
  labs(y = "Frequency",
       x = "",
       title = "% missing data: Pakistan")+
  theme_bw()

lp02

```

## Pak after removing BCL01:

```{r, error = F, message=F, warning = F}

dspak22 <- subset(dspak, select = -c(EXPBCL01))

mds <- map(dspak22, ~mean(is.na(.))*100) 
mds <- as.data.frame(mds)
mds1 <- as_tibble(cbind(variable = names(mds), t(mds)))
mds1$percent_missing <- mds1$V2

mds1$percent_missing <- as.numeric(mds1$percent_missing)
summary(mds1$percent_missing)

mds2 <- select(mds1,-c(2))
mds2 <- as.data.frame(mds2)
mds2$percent_missing <- as.numeric(mds2$percent_missing)
mds2 <- as.data.table(mds2)
mds2a <- mds2[1:30,]
mds2b <- mds2[31:54,]

lp01 <- mds2a %>% 
  # drop_na(Country) %>%
  lollipop_chart(x = variable,
                 y = percent_missing,
               line_color = "black",
               point_color = "black")+
  labs(y = "Frequency",
       x = "",
       title = "% missing data: Pakistan")+
  theme_bw()

lp01

lp02 <- mds2b %>% 
  # drop_na(Country) %>%
  lollipop_chart(x = variable,
                 y = percent_missing,
               line_color = "black",
               point_color = "black")+
  labs(y = "Frequency",
       x = "",
       title = "% missing data: Pakistan")+
  theme_bw()

lp02

```

## Missing data: Tanzania

```{r, error = F, message=F, warning = F}
mds <- map(dstza, ~mean(is.na(.))*100) 
mds <- as.data.frame(mds)
mds1 <- as_tibble(cbind(variable = names(mds), t(mds)))
mds1$percent_missing <- mds1$V2

mds1$percent_missing <- as.numeric(mds1$percent_missing)
summary(mds1$percent_missing)

mds2 <- select(mds1,-c(2))
mds2 <- as.data.frame(mds2)
mds2$percent_missing <- as.numeric(mds2$percent_missing)
mds2 <- as.data.table(mds2)
mds2a <- mds2[1:30,]
mds2b <- mds2[31:55,]

lp01 <- mds2a %>% 
  # drop_na(Country) %>%
  lollipop_chart(x = variable,
                 y = percent_missing,
               line_color = "black",
               point_color = "black")+
  labs(y = "Frequency",
       x = "",
       title = "% missing data: Tanzania")+
  theme_bw()

lp01

lp02 <- mds2b %>% 
  # drop_na(Country) %>%
  lollipop_chart(x = variable,
                 y = percent_missing,
               line_color = "black",
               point_color = "black")+
  labs(y = "Frequency",
       x = "",
       title = "% missing data: Tanzania")+
  theme_bw()

lp02

```


## Missing data: Uganda

```{r, error = F, message=F, warning = F}
mds <- map(dsuga, ~mean(is.na(.))*100) 
mds <- as.data.frame(mds)
mds1 <- as_tibble(cbind(variable = names(mds), t(mds)))
mds1$percent_missing <- mds1$V2

mds1$percent_missing <- as.numeric(mds1$percent_missing)
summary(mds1$percent_missing)

mds2 <- select(mds1,-c(2))
mds2 <- as.data.frame(mds2)
mds2$percent_missing <- as.numeric(mds2$percent_missing)
mds2 <- as.data.table(mds2)
mds2a <- mds2[1:30,]
mds2b <- mds2[31:55,]

lp01 <- mds2a %>% 
  # drop_na(Country) %>%
  lollipop_chart(x = variable,
                 y = percent_missing,
               line_color = "black",
               point_color = "black")+
  labs(y = "Frequency",
       x = "",
       title = "% missing data: Uganda")+
  theme_bw()

lp01

lp02 <- mds2b %>% 
  # drop_na(Country) %>%
  lollipop_chart(x = variable,
                 y = percent_missing,
               line_color = "black",
               point_color = "black")+
  labs(y = "Frequency",
       x = "",
       title = "% missing data: Uganda")+
  theme_bw()

lp02

```

## Demographic Variables: 

```{r, error = F, message=F, warning = F}

ds$gender <- ifelse(ds$gender == "Male", "Male",
             ifelse(ds$gender == "Female", "Female", NA))

## ses:
ds$ses <- ifelse(ds$ses == "", NA, ds$ses)

## jobnature:
ds$jobnature <- ifelse(ds$jobnature == "", NA, ds$jobnature)

#sentence case for jobnature:
ds$jobnature <- gsub("(\\D)(\\D+)", "\\U\\1\\L\\2", ds$jobnature, perl = TRUE)

ds$jobnature <- ifelse(ds$jobnature == "Non-government/self-employed", 
                       "Non-government", ds$jobnature)

## Religion:
ds$religion <- ifelse(ds$religion == "", NA, ds$religion)

ds$religion <- ifelse(ds$religion == "Christian (Catholic)", "Christian: Catholic", 
               ifelse(ds$religion == "Christian (Protestant)", "Christian: Protestant",
               ifelse(ds$religion == "Muslim (Shia)", "Muslim: Shia",
               ifelse(ds$religion == "Muslim (Sunni)", "Muslim: Sunni", ds$religion))))

## Marital status

ds$married <- ifelse(ds$married == "Not married", "Unmarried", ds$married)
ds$married <- ifelse(ds$married == "", NA, ds$married)

## Individual country datasets:
dsgmb <- ds[ds$Country == "Gambia", ]
dspak <- ds[ds$Country == "Pakistan", ]
dstza <- ds[ds$Country == "Tanzania", ]
dsuga <- ds[ds$Country == "Uganda", ]

```

Demographic variables in the analysis:

-   Age
-   Gender
-   Socio-economic status
-   Nature of employment
-   Religious affiliation
-   Marital status
-   Ethnicity

## Variable: Sample size by Country

```{r, error = F, message = F, warning = F}

tbl01 <- table(ds$Country)

## Table of user language by country:
tbl01

## Sample size by country:

lp01 <- ds %>% 
  # drop_na(Country) %>%
  lollipop_chart(x = Country,
               line_color = "black",
               point_color = "black")+
  labs(y = "Frequency",
       x = "",
       title = "Sample size by country")+
  theme_bw()

lp01

```

## Variable: Age

```{r, error = F, message = F, warning = F}

summary(ds$age)

ds %>% drop_na(age)%>%
ggplot(aes(x = age))+
  geom_histogram(color = "black",
                 fill = "gray",
                 bins = 50)+
  geom_textvline(label = "Mean = 37.00", 
                 xintercept = 37.00, 
                 vjust = 1.1, 
                 lwd = 1.05, 
                 linetype = 2)+
  labs(x = "Age", 
       y = "Frequency", 
       title = "Age distribution (full sample)")+
  theme_bw()

ds %>% drop_na(age)%>%
ggplot(aes(x = age))+
  geom_histogram(color = "black",
                 fill = "gray",
                 bins = 50)+
  labs(x = "Age", 
       y = "Frequency", 
       title = "Age distribution by country")+
  facet_wrap(~Country, nrow = 2)+
  theme_bw()


```

## Variable: Gender

```{r, error = F, message = F, warning = F}

ds$gender <- ifelse(ds$gender == "Male", "Male",
             ifelse(ds$gender == "Female", "Female", NA))

lp02 <- ds %>% 
  drop_na(gender, age, Country) %>%
lollipop_chart(x = gender,
               line_color = "black",
               point_color = "black")+
  labs(y = "Frequency",
       x = "",
       title = "Gender distribution (full sample)")+
#  facet_wrap(~Country, nrow = 2)+
  theme_bw()

lp02


bp01 <- ds %>% drop_na(gender, age) %>% 
  ggplot(aes(y = age, 
             x = gender))+
geom_boxplot(fill = "grey")+
  labs(y = "Age",
       x = "",
       title = "Age and gender distribution by country")+
  facet_wrap(~Country, nrow = 2)+
  coord_flip()+
  theme_bw()

bp01

```

## Variable: Socio-economic status

```{r, error = F, message = F, warning = F}

ds$ses <- ifelse(ds$ses == "", NA, ds$ses)
table(ds$ses)

ds %>% drop_na(ses) %>%
lollipop_chart(x = ses,
               line_color = "black",
               point_color = "black")+
  labs(y = "Frequency",
       x = "",
       title = "Socioeconomic status (full sample)")+
  theme_bw()


```

## Variable: Nature of employment

```{r, error = F, message = F, warning = F}

table(ds$jobnature)

ds %>% drop_na(jobnature) %>%
lollipop_chart(x = jobnature,
               line_color = "black",
               point_color = "black")+
  labs(y = "Frequency",
       x = "",
       title = "Nature of employment (full sample)")+
  theme_bw()


```

## Variable: Religious affiliation

```{r, error = F, message = F, warning = F}
table(ds$religion)

lp05 <- ds %>% drop_na(religion) %>%
lollipop_chart(x = religion,
               line_color = "black",
               point_color = "black")+
  labs(y = "Frequency",
       x = "",
       title = "Religious distribution (full sample)")+
  theme_bw()

lp05

```

## Variable: Marital status

```{r, error = F, message = F, warning = F}

table(ds$married)



```

## Variable: Education

```{r, error = F, message = F, warning = F}

table(ds$education)

## Education for individual countries:

# table(dsgmb$education)
# table(dspak$education)
# table(dstza$education)
# table(dsuga$education)


```


## Variable: Ethnicity

```{r, error = F, message = F, warning = F}

## Gambia:
eth <- as.data.frame(table(dsgmb$Ethnicity))
eth$Var1 <- as.character(eth$Var1)
eth$ethnicity <- ifelse(eth$Freq < 2, "Other", eth$Var1)
l1 <- as.list(eth$ethnicity)

dsgmb2 <- dsgmb[, c("Ethnicity")]

dsgmb2$ethnicity <- ifelse(dsgmb2$Ethnicity %in% l1, dsgmb2$Ethnicity, "Other")
dsgmb2$ethnicity <- ifelse(dsgmb2$ethnicity == "Serere", "Serer",
                 ifelse(dsgmb2$ethnicity == "", NA, dsgmb2$ethnicity))

table(dsgmb2$ethnicity)

ethgmb <- dsgmb2 %>% drop_na(ethnicity) %>%
lollipop_chart(x = ethnicity,
               line_color = "black",
               point_color = "black")+
  labs(y = "Frequency",
       x = "",
       title = "Ethnic distribution: Gambia")+
  theme_bw()

ethgmb

## Pakistan:
eth <- as.data.frame(table(dspak$Ethnicity))
eth$Var1 <- as.character(eth$Var1)
eth$ethnicity <- ifelse(eth$Freq < 7, "Other", eth$Var1)
l1 <- as.list(eth$ethnicity)

dspak2 <- dspak[, c("Ethnicity")]

dspak2$ethnicity <- ifelse(dspak2$Ethnicity %in% l1, dspak2$Ethnicity, "Other")
dspak2$ethnicity <- ifelse(dspak2$ethnicity == "Serere", "Serer",
                 ifelse(dspak2$ethnicity == "", NA, dspak2$ethnicity))

table(dspak2$ethnicity)

ethpak <- dspak2 %>% drop_na(ethnicity) %>%
lollipop_chart(x = ethnicity,
               line_color = "black",
               point_color = "black")+
  labs(y = "Frequency",
       x = "",
       title = "Ethnic distribution: Pakistan")+
  theme_bw()

ethpak

## Tanzania:
eth <- as.data.frame(table(dstza$Ethnicity))
eth$Var1 <- as.character(eth$Var1)
eth$ethnicity <- ifelse(eth$Freq < 7, "Other", eth$Var1)
l1 <- as.list(eth$ethnicity)

dstza2 <- dstza[, c("Ethnicity")]

dstza2$ethnicity <- ifelse(dstza2$Ethnicity %in% l1, dstza2$Ethnicity, "Other")
dstza2$ethnicity <- ifelse(dstza2$ethnicity == "Serere", "Serer",
                 ifelse(dstza2$ethnicity == "", NA, dstza2$ethnicity))

table(dstza2$ethnicity)

ethtza <- dstza2 %>% drop_na(ethnicity) %>%
lollipop_chart(x = ethnicity,
               line_color = "black",
               point_color = "black")+
  labs(y = "Frequency",
       x = "",
       title = "Ethnic distribution: Tanzania")+
  theme_bw()

ethtza

## Uganda:
eth <- as.data.frame(table(dsuga$Ethnicity))
eth$Var1 <- as.character(eth$Var1)
eth$ethnicity <- ifelse(eth$Freq < 7, "Other", eth$Var1)
l1 <- as.list(eth$ethnicity)

dsuga2 <- dsuga[, c("Ethnicity")]

dsuga2$ethnicity <- ifelse(dsuga2$Ethnicity %in% l1, dsuga2$Ethnicity, "Other")
dsuga2$ethnicity <- ifelse(dsuga2$ethnicity == "Serere", "Serer",
                 ifelse(dsuga2$ethnicity == "", NA, dsuga2$ethnicity))

table(dsuga2$ethnicity)

ethuga <- dsuga2 %>% drop_na(ethnicity) %>%
lollipop_chart(x = ethnicity,
               line_color = "black",
               point_color = "black")+
  labs(y = "Frequency",
       x = "",
       title = "Ethnic distribution: Uganda")+
  theme_bw()

ethuga

```

# **Section 2. Measures of interest**

Variables of interest in the analysis: 

- Endorsement of Barrier Bound Leadership (BBL)
- Endorsement of Barrier Crossing Leadership (BCL)
- Ingroup fusion
- Ingroup identification
- Outgroup bonds (sum of outgroup fusion+identification)
- Empathic concern
- Perspective taking
- Perceived history of discrimination

- Positive contact with outgroup
- Negative contact with outgroup

- Imagistic items:
  - Event: Positive affect
  - Event: Negative affect
  - Event: Episodic recall
  - Event: Shared perception
  - Event: Reflection
  - Event: Transformative for individual
  - Event: Transformative for group
  - Imagistic event (sum of all above)

- Perception of religion Freedom
- Experience of religious freedom
  
## Variable: Endorsement of Barrier Bound Leadership (BBL)

```{r, error = F, message = F, warning=F}

ds$bbl <- (ds$ENDBBL01+ ds$ENDBBL02+ ds$ENDBBL03)/3
ds$bcl <- (ds$ENDBCL01+ ds$ENDBCL02+ ds$ENDBCL03)/3

summary(ds$bbl)

ds %>% drop_na(bbl)%>%
ggplot(aes(x = bbl))+
  geom_histogram(color = "black",
                 fill = "gray",
                 bins = 25)+
  geom_textvline(label = "Mean = 4.00", 
                 xintercept = 4.00, 
                 vjust = 1.1, 
                 lwd = 1.05, 
                 linetype = 2)+
  labs(x = "Endorsement of BBL score", 
       y = "Frequency", 
       title = "Endorsement of BBL (full sample)")+
  theme_bw()


ds %>% drop_na(bbl, Country)%>%
ggplot(aes(x = bbl))+
  geom_histogram(color = "black",
                 fill = "gray",
                 bins = 25)+
 labs(x = "Endorsement of BBL score", 
       y = "Frequency", 
       title = "Endorsement of BBL by country")+
  facet_wrap(~Country)+
  theme_bw()

ds %>% drop_na(bbl)%>%
ggplot(aes(x = bbl,
           y = Country))+
  geom_boxplot(fill = "grey")+
  geom_textvline(label = " ", 
                 xintercept = 4.00, 
                 vjust = 1.1, 
                 lwd = 1.05, 
                 linetype = 2)+
 labs(x = "Endorsement of BBL score", 
       y = "Frequency", 
       title = "Endorsement of BBL by country")+
  #facet_wrap(~Country, nrow = 2)+
  theme_bw()

```

## Variable: Endorsement of Barrier Crossing Leadership (BCL)

```{r, error = F, message = F, warning=F}

summary(ds$bcl)

ds %>% drop_na(bcl)%>%
ggplot(aes(x = bcl))+
  geom_histogram(color = "black",
                 fill = "gray",
                 bins = 25)+
  geom_textvline(label = "Mean = 6.00", 
                 xintercept = 6.00, 
                 vjust = 1.1, 
                 lwd = 1.05, 
                 linetype = 2)+
  labs(x = "Endorsement of BCL score", 
       y = "Frequency", 
       title = "Endorsement of BCL (full sample)")+
  theme_bw()


ds %>% drop_na(bcl, Country)%>%
ggplot(aes(x = bcl))+
  geom_histogram(color = "black",
                 fill = "gray",
                 bins = 25)+
 labs(x = "Endorsement of BCL score", 
       y = "Frequency", 
       title = "Endorsement of BCL by country")+
  facet_wrap(~Country)+
  theme_bw()

ds %>% drop_na(bcl)%>%
ggplot(aes(x = bcl,
           y = Country))+
  geom_boxplot(fill = "grey")+
  geom_textvline(label = " ", 
                 xintercept = 6.00, 
                 vjust = 1.1, 
                 lwd = 1.05, 
                 linetype = 2)+
 labs(x = "Endorsement of BCL score", 
       y = "Frequency", 
       title = "Endorsement of BCL by country")+
  #facet_wrap(~Country, nrow = 2)+
  theme_bw()

```

## Variable: Ingroup fusion

```{r, error = F, message = F, warning=F}

ds$igfusion <- (ds$IGF01+ds$IGF02+ds$IGF03)/3

summary(ds$igfusion)

ds %>% drop_na(igfusion)%>%
ggplot(aes(x = igfusion))+
  geom_histogram(color = "black",
                 fill = "gray",
                 bins = 25)+
  geom_textvline(label = "Mean = 6.00", 
                 xintercept = 6.00, 
                 vjust = 1.1, 
                 lwd = 1.05, 
                 linetype = 2)+
  labs(x = "Ingroup fusion score", 
       y = "Frequency", 
       title = "Ingroup fusion (full sample)")+
  theme_bw()


ds %>% drop_na(igfusion, Country)%>%
ggplot(aes(x = igfusion))+
  geom_histogram(color = "black",
                 fill = "gray",
                 bins = 25)+
 labs(x = "Ingroup fusion score", 
       y = "Frequency", 
       title = "Ingroup fusion by country")+
  facet_wrap(~Country)+
  theme_bw()

ds %>% drop_na(igfusion)%>%
ggplot(aes(x = igfusion,
           y = Country))+
  geom_boxplot(fill = "grey")+
  geom_textvline(label = " ", 
                 xintercept = 6.00, 
                 vjust = 1.1, 
                 lwd = 1.05, 
                 linetype = 2)+
  labs(x = "Ingroup fusion score", 
       y = "Frequency", 
       title = "Ingroup fusion by country")+
  #facet_wrap(~Country, nrow = 2)+
  theme_bw()

```

## Variable: Ingroup identification

```{r, error = F, message = F, warning=F}

ds$IGI01 <- ifelse(ds$IGI01 %in% 1:7, ds$IGI01, NA)
ds$igidentification <- (ds$IGI01+ds$IGI02+ds$IGI03)/3

summary(ds$igidentification)

ds %>% drop_na(igidentification)%>%
ggplot(aes(x = igidentification))+
  geom_histogram(color = "black",
                 fill = "gray",
                 bins = 25)+
  geom_textvline(label = "Mean = 6.00", 
                 xintercept = 6.00, 
                 vjust = 1.1, 
                 lwd = 1.05, 
                 linetype = 2)+
  labs(x = "Ingroup identification score", 
       y = "Frequency", 
       title = "Ingroup identification (full sample)")+
  theme_bw()


ds %>% drop_na(igidentification, Country)%>%
ggplot(aes(x = igidentification))+
  geom_histogram(color = "black",
                 fill = "gray",
                 bins = 25)+
 labs(x = "Ingroup identification score", 
       y = "Frequency", 
       title = "Ingroup identification by country")+
  facet_wrap(~Country)+
  theme_bw()

ds %>% drop_na(igidentification)%>%
ggplot(aes(x = igidentification,
           y = Country))+
  geom_boxplot(fill = "grey")+
  geom_textvline(label = " ", 
                 xintercept = 6.00, 
                 vjust = 1.1, 
                 lwd = 1.05, 
                 linetype = 2)+
  labs(x = "Ingroup identification score", 
       y = "Frequency", 
       title = "Ingroup identification by country")+
  #facet_wrap(~Country, nrow = 2)+
  theme_bw()

```

## Variable: Outgroup bonds

```{r, error = F, message = F, warning=F}

ds$ogbonds <- (ds$OGI01+ds$OGI02+ds$OGI03+
               ds$OGF01+ds$OGF02+ds$OGF03)/6

summary(ds$ogbonds)

ds %>% drop_na(ogbonds)%>%
ggplot(aes(x = ogbonds))+
  geom_histogram(color = "black",
                 fill = "gray",
                 bins = 35)+
  geom_textvline(label = "Mean = 3.00", 
                 xintercept = 3.00, 
                 vjust = 1.1, 
                 lwd = 1.05, 
                 linetype = 2)+
  labs(x = "Outgroup bonds score", 
       y = "Frequency", 
       title = "Outgroup bonds (full sample)")+
  theme_bw()


ds %>% drop_na(ogbonds, Country)%>%
ggplot(aes(x = ogbonds))+
  geom_histogram(color = "black",
                 fill = "gray",
                 bins = 25)+
 labs(x = "Outgroup bonds score", 
       y = "Frequency", 
       title = "Outgroup bonds by country")+
  facet_wrap(~Country)+
  theme_bw()

ds %>% drop_na(ogbonds)%>%
ggplot(aes(x = ogbonds,
           y = Country))+
  geom_boxplot(fill = "grey")+
  geom_textvline(label = " ", 
                 xintercept = 3.00, 
                 vjust = 1.1, 
                 lwd = 1.05, 
                 linetype = 2)+
 labs(x = "Outgroup bonds score", 
       y = "Frequency", 
       title = "Outgroup bonds by country")+
  #facet_wrap(~Country, nrow = 2)+
  theme_bw()

```

## Variable: Empathic concern

```{r, error = F, message = F, warning=F}

ds$empathic_concern <- (ds$empathic_concern_01+ds$empathic_concern_02+
                        ds$empathic_concern_03)/3

summary(ds$empathic_concern)

ds %>% drop_na(empathic_concern)%>%
ggplot(aes(x = empathic_concern))+
  geom_histogram(color = "black",
                 fill = "gray",
                 bins = 35)+
  geom_textvline(label = "Mean = 6.00", 
                 xintercept = 6.00, 
                 vjust = 1.1, 
                 lwd = 1.05, 
                 linetype = 2)+
  labs(x = "Empathic concern score", 
       y = "Frequency", 
       title = "Empathic concern (full sample)")+
  theme_bw()


ds %>% drop_na(empathic_concern, Country)%>%
ggplot(aes(x = empathic_concern))+
  geom_histogram(color = "black",
                 fill = "gray",
                 bins = 25)+
 labs(x = "Empathic concern score", 
       y = "Frequency", 
       title = "Empathic concern by country")+
  facet_wrap(~Country)+
  theme_bw()

ds %>% drop_na(empathic_concern)%>%
ggplot(aes(x = empathic_concern,
           y = Country))+
  geom_boxplot(fill = "grey")+
  geom_textvline(label = " ", 
                 xintercept = 6.00, 
                 vjust = 1.1, 
                 lwd = 1.05, 
                 linetype = 2)+
 labs(x = "Empathic concern score", 
       y = "Frequency", 
       title = "Empathic concern by country")+
  #facet_wrap(~Country, nrow = 2)+
  theme_bw()

```

## Variable: Perspective taking

```{r, error = F, message = F, warning=F}

ds$perspective_taking <- (ds$perspective_taking_01+ds$perspective_taking_02+
                          ds$perspective_taking_03+ds$perspective_taking_04)/4

summary(ds$perspective_taking)

ds %>% drop_na(perspective_taking)%>%
ggplot(aes(x = perspective_taking))+
  geom_histogram(color = "black",
                 fill = "gray",
                 bins = 35)+
  geom_textvline(label = "Mean = 6.00", 
                 xintercept = 6.00, 
                 vjust = 1.1, 
                 lwd = 1.05, 
                 linetype = 2)+
  labs(x = "Perspective taking score", 
       y = "Frequency", 
       title = "Perspective taking (full sample)")+
  theme_bw()


ds %>% drop_na(perspective_taking, Country)%>%
ggplot(aes(x = perspective_taking))+
  geom_histogram(color = "black",
                 fill = "gray",
                 bins = 25)+
 labs(x = "Perspective taking score", 
       y = "Frequency", 
       title = "Perspective taking by country")+
  facet_wrap(~Country)+
  theme_bw()

ds %>% drop_na(perspective_taking)%>%
ggplot(aes(x = perspective_taking,
           y = Country))+
  geom_boxplot(fill = "grey")+
  geom_textvline(label = " ", 
                 xintercept = 6.00, 
                 vjust = 1.1, 
                 lwd = 1.05, 
                 linetype = 2)+
 labs(x = "Perspective taking score", 
       y = "Frequency", 
       title = "Perspective taking by country")+
  #facet_wrap(~Country, nrow = 2)+
  theme_bw()

```

## Variable: Perceived history of discrimination

```{r, error = F, message = F, warning=F}

summary(ds$history_discrimination)

ds %>% drop_na(history_discrimination)%>%
ggplot(aes(x = history_discrimination))+
  geom_histogram(color = "black",
                 fill = "gray",
                 bins = 10)+
  geom_textvline(label = "Mean = 4.00", 
                 xintercept = 4.00, 
                 vjust = 1.1, 
                 lwd = 1.05, 
                 linetype = 2)+
  labs(x = "Perceived history of discrimination score", 
       y = "Frequency", 
       title = "Perceived history of discrimination (full sample)")+
  theme_bw()


ds %>% drop_na(history_discrimination, Country)%>%
ggplot(aes(x = history_discrimination))+
  geom_histogram(color = "black",
                 fill = "gray",
                 bins = 10)+
 labs(x = "Perceived history of discrimination score", 
       y = "Frequency", 
       title = "Perceived history of discrimination by country")+
  facet_wrap(~Country)+
  theme_bw()

ds %>% drop_na(history_discrimination)%>%
ggplot(aes(x = history_discrimination,
           y = Country))+
  geom_boxplot(fill = "grey")+
  geom_textvline(label = " ", 
                 xintercept = 4.00, 
                 vjust = 1.1, 
                 lwd = 1.05, 
                 linetype = 2)+ 
  labs(x = "Perceived history of discrimination score", 
       y = "Frequency", 
       title = "Perceived history of discrimination by country")+
  #facet_wrap(~Country, nrow = 2)+
  theme_bw()

```

## Variable: Event: Positive Affect

```{r, error = F, message = F, warning=F}

summary(ds$Event_positive_affect)

ds %>% drop_na(Event_positive_affect)%>%
ggplot(aes(x = Event_positive_affect))+
  geom_histogram(color = "black",
                 fill = "gray",
                 bins = 15)+
  geom_textvline(label = "Mean = 4.00", 
                 xintercept = 4.00, 
                 vjust = 1.1, 
                 lwd = 1.05, 
                 linetype = 2)+
  labs(x = "Event: Positive affect score", 
       y = "Frequency", 
       title = "Event: Positive affect (full sample)")+
  theme_bw()


ds %>% drop_na(Event_positive_affect, Country)%>%
ggplot(aes(x = Event_positive_affect))+
  geom_histogram(color = "black",
                 fill = "gray",
                 bins = 15)+
 labs(x = "Event: Positive affect score", 
       y = "Frequency", 
       title = "Event: Positive affect by country")+
  facet_wrap(~Country)+
  theme_bw()

ds %>% drop_na(Event_positive_affect)%>%
ggplot(aes(x = Event_positive_affect,
           y = Country))+
  geom_boxplot(fill = "grey")+
  geom_textvline(label = " ", 
                 xintercept = 4.00, 
                 vjust = 1.1, 
                 lwd = 1.05, 
                 linetype = 2)+ 
  labs(x = "Event: Positive affect score", 
       y = "Frequency", 
       title = "Event: Positive affect by country")+
  #facet_wrap(~Country, nrow = 2)+
  theme_bw()

```


## Variable: Event: Negative Affect

```{r, error = F, message = F, warning=F}

summary(ds$Event_negative_affect)

ds %>% drop_na(Event_negative_affect)%>%
ggplot(aes(x = Event_negative_affect))+
  geom_histogram(color = "black",
                 fill = "gray",
                 bins = 15)+
  geom_textvline(label = "Mean = 5.00", 
                 xintercept = 5.00, 
                 vjust = 1.1, 
                 lwd = 1.05, 
                 linetype = 2)+
  labs(x = "Event: Negative affect score", 
       y = "Frequency", 
       title = "Event: Negative affect (full sample)")+
  theme_bw()


ds %>% drop_na(Event_negative_affect, Country)%>%
ggplot(aes(x = Event_negative_affect))+
  geom_histogram(color = "black",
                 fill = "gray",
                 bins = 15)+
 labs(x = "Event: Negative affect score", 
       y = "Frequency", 
       title = "Event: Negative affect by country")+
  facet_wrap(~Country)+
  theme_bw()

ds %>% drop_na(Event_negative_affect)%>%
ggplot(aes(x = Event_negative_affect,
           y = Country))+
  geom_boxplot(fill = "grey")+
  geom_textvline(label = " ", 
                 xintercept = 5.00, 
                 vjust = 1.1, 
                 lwd = 1.05, 
                 linetype = 2)+ 
  labs(x = "Event: Negative affect score", 
       y = "Frequency", 
       title = "Event: Negative affect by country")+
  #facet_wrap(~Country, nrow = 2)+
  theme_bw()

```


## Variable: Event: Episodic recall

```{r, error = F, message = F, warning=F}

summary(ds$Event_episodic_recall)

ds %>% drop_na(Event_episodic_recall)%>%
ggplot(aes(x = Event_episodic_recall))+
  geom_histogram(color = "black",
                 fill = "gray",
                 bins = 15)+
  geom_textvline(label = "Mean = 6.00", 
                 xintercept = 6.00, 
                 vjust = 1.1, 
                 lwd = 1.05, 
                 linetype = 2)+
  labs(x = "Event: Episodic recall score", 
       y = "Frequency", 
       title = "Event: Episodic recall (full sample)")+
  theme_bw()


ds %>% drop_na(Event_episodic_recall, Country)%>%
ggplot(aes(x = Event_episodic_recall))+
  geom_histogram(color = "black",
                 fill = "gray",
                 bins = 15)+
 labs(x = "Event: Episodic recall score", 
       y = "Frequency", 
       title = "Event: Episodic recall by country")+
  facet_wrap(~Country)+
  theme_bw()

ds %>% drop_na(Event_episodic_recall)%>%
ggplot(aes(x = Event_episodic_recall,
           y = Country))+
  geom_boxplot(fill = "grey")+
  geom_textvline(label = " ", 
                 xintercept = 6.00, 
                 vjust = 1.1, 
                 lwd = 1.05, 
                 linetype = 2)+ 
  labs(x = "Event: Episodic recall score", 
       y = "Frequency", 
       title = "Event: Episodic recall by country")+
  #facet_wrap(~Country, nrow = 2)+
  theme_bw()

```

## Variable: Event: Shared perception

```{r, error = F, message = F, warning=F}

summary(ds$Event_shared_perception)

ds %>% drop_na(Event_shared_perception)%>%
ggplot(aes(x = Event_shared_perception))+
  geom_histogram(color = "black",
                 fill = "gray",
                 bins = 15)+
  geom_textvline(label = "Mean = 6.00", 
                 xintercept = 6.00, 
                 vjust = 1.1, 
                 lwd = 1.05, 
                 linetype = 2)+
  labs(x = "Event: Shared perception score", 
       y = "Frequency", 
       title = "Event: Shared perception (full sample)")+
  theme_bw()


ds %>% drop_na(Event_shared_perception, Country)%>%
ggplot(aes(x = Event_shared_perception))+
  geom_histogram(color = "black",
                 fill = "gray",
                 bins = 15)+
 labs(x = "Event: Shared perception score", 
       y = "Frequency", 
       title = "Event: Shared perception by country")+
  facet_wrap(~Country)+
  theme_bw()

ds %>% drop_na(Event_shared_perception)%>%
ggplot(aes(x = Event_shared_perception,
           y = Country))+
  geom_boxplot(fill = "grey")+
  geom_textvline(label = " ", 
                 xintercept = 6.00, 
                 vjust = 1.1, 
                 lwd = 1.05, 
                 linetype = 2)+ 
  labs(x = "Event: Shared perception score", 
       y = "Frequency", 
       title = "Event: Shared perception by country")+
  #facet_wrap(~Country, nrow = 2)+
  theme_bw()

```

## Variable: Event: Reflection

```{r, error = F, message = F, warning=F}

ds$Event_reflection <- ds$Event_event_reflection
summary(ds$Event_reflection)

ds %>% drop_na(Event_reflection)%>%
ggplot(aes(x = Event_reflection))+
  geom_histogram(color = "black",
                 fill = "gray",
                 bins = 15)+
  geom_textvline(label = "Mean = 6.00", 
                 xintercept = 6.00, 
                 vjust = 1.1, 
                 lwd = 1.05, 
                 linetype = 2)+
  labs(x = "Event: Reflection score", 
       y = "Frequency", 
       title = "Event: Reflection (full sample)")+
  theme_bw()


ds %>% drop_na(Event_reflection, Country)%>%
ggplot(aes(x = Event_reflection))+
  geom_histogram(color = "black",
                 fill = "gray",
                 bins = 15)+
 labs(x = "Event: Reflection score", 
       y = "Frequency", 
       title = "Event: Reflection by country")+
  facet_wrap(~Country)+
  theme_bw()

ds %>% drop_na(Event_reflection)%>%
ggplot(aes(x = Event_reflection,
           y = Country))+
  geom_boxplot(fill = "grey")+
  geom_textvline(label = " ", 
                 xintercept = 6.00, 
                 vjust = 1.1, 
                 lwd = 1.05, 
                 linetype = 2)+ 
  labs(x = "Event: Reflection score", 
       y = "Frequency", 
       title = "Event: Reflection by country")+
  #facet_wrap(~Country, nrow = 2)+
  theme_bw()

```

## Variable: Event: Transformative for individual

```{r, error = F, message = F, warning=F}

summary(ds$Event_transformative_indiv)

ds %>% drop_na(Event_transformative_indiv)%>%
ggplot(aes(x = Event_transformative_indiv))+
  geom_histogram(color = "black",
                 fill = "gray",
                 bins = 15)+
  geom_textvline(label = "Mean = 5.00", 
                 xintercept = 5.00, 
                 vjust = 1.1, 
                 lwd = 1.05, 
                 linetype = 2)+
  labs(x = "Event: Transformative for individual score", 
       y = "Frequency", 
       title = "Event: Transformative for individual (full sample)")+
  theme_bw()


ds %>% drop_na(Event_transformative_indiv, Country)%>%
ggplot(aes(x = Event_transformative_indiv))+
  geom_histogram(color = "black",
                 fill = "gray",
                 bins = 15)+
 labs(x = "Event: Transformative for individual score", 
       y = "Frequency", 
       title = "Event: Transformative for individual by country")+
  facet_wrap(~Country)+
  theme_bw()

ds %>% drop_na(Event_transformative_indiv)%>%
ggplot(aes(x = Event_transformative_indiv,
           y = Country))+
  geom_boxplot(fill = "grey")+
  geom_textvline(label = " ", 
                 xintercept = 5.00, 
                 vjust = 1.1, 
                 lwd = 1.05, 
                 linetype = 2)+ 
  labs(x = "Event: Transformative for individual score", 
       y = "Frequency", 
       title = "Event: Transformative for individual by country")+
  #facet_wrap(~Country, nrow = 2)+
  theme_bw()

```


## Variable: Event: Transformative for group

```{r, error = F, message = F, warning=F}

summary(ds$Event_transformative_group)

ds %>% drop_na(Event_transformative_group)%>%
ggplot(aes(x = Event_transformative_group))+
  geom_histogram(color = "black",
                 fill = "gray",
                 bins = 15)+
  geom_textvline(label = "Mean = 5.00", 
                 xintercept = 5.00, 
                 vjust = 1.1, 
                 lwd = 1.05, 
                 linetype = 2)+
  labs(x = "Event: Transformative for group score", 
       y = "Frequency", 
       title = "Event: Transformative for group (full sample)")+
  theme_bw()


ds %>% drop_na(Event_transformative_group, Country)%>%
ggplot(aes(x = Event_transformative_group))+
  geom_histogram(color = "black",
                 fill = "gray",
                 bins = 15)+
 labs(x = "Event: Transformative for group score", 
       y = "Frequency", 
       title = "Event: Transformative for group by country")+
  facet_wrap(~Country)+
  theme_bw()

ds %>% drop_na(Event_transformative_group)%>%
ggplot(aes(x = Event_transformative_group,
           y = Country))+
  geom_boxplot(fill = "grey")+
  geom_textvline(label = " ", 
                 xintercept = 5.00, 
                 vjust = 1.1, 
                 lwd = 1.05, 
                 linetype = 2)+ 
  labs(x = "Event: Transformative for group score", 
       y = "Frequency", 
       title = "Event: Transformative for group by country")+
  #facet_wrap(~Country, nrow = 2)+
  theme_bw()

```


## Variable: Imagistic event (sum of all subscales)

```{r, error = F, message = F, warning=F}

ds$Event_imagistic <- ds$Imagistic

summary(ds$Event_imagistic)

ds %>% drop_na(Event_imagistic)%>%
ggplot(aes(x = Event_imagistic))+
  geom_histogram(color = "black",
                 fill = "gray",
                 bins = 15)+
  geom_textvline(label = "Mean = 35.00", 
                 xintercept = 35.00, 
                 vjust = 1.1, 
                 lwd = 1.05, 
                 linetype = 2)+
  labs(x = "Event: Imagistic score", 
       y = "Frequency", 
       title = "Event: Imagistic (full sample)")+
  theme_bw()


ds %>% drop_na(Event_imagistic, Country)%>%
ggplot(aes(x = Event_imagistic))+
  geom_histogram(color = "black",
                 fill = "gray",
                 bins = 15)+
 labs(x = "Event: Imagistic score", 
       y = "Frequency", 
       title = "Event: Imagistic by country")+
  facet_wrap(~Country)+
  theme_bw()

ds %>% drop_na(Event_imagistic)%>%
ggplot(aes(x = Event_imagistic,
           y = Country))+
  geom_boxplot(fill = "grey")+
  geom_textvline(label = " ", 
                 xintercept = 35.00, 
                 vjust = 1.1, 
                 lwd = 1.05, 
                 linetype = 2)+ 
  labs(x = "Event: Imagistic score", 
       y = "Frequency", 
       title = "Event: Imagistic by country")+
  #facet_wrap(~Country, nrow = 2)+
  theme_bw()

```

# **Section 3. Outcome: Social perception of Religious Freedom**

## Unconditional means model

Also called "varying intercept model with no predictors" (Gelman and Hill, 2016, Chapter 12). Allows intercepts to randomly vary across countries:

```{r, error = F, message = F, warning = F}
ds$SPRF <- ds$Sprf

## Varying intercept model with no predictors:
m00<- lmer(SPRF ~ 1 + (1 | Country), 
           data = ds)

summary(m00)

```

Random effects:

Variance for Intercept = 0.03. This is the variance of the means across level 1 categories (countries). 
Residual = 0.44. Variance explained by level 1 residuals (everything that's not in level 1).

```{r, error = F, message = F, warning = F}

tab_model(m00)

```

We can see that ICC = 0.06. Lower ICC = low variance explained across groups. In this case, most of the variability is at individual-level (not group level). There is no significantly different patterns between countries. 

## Random intercept models

Also called "varying intercept model with individual-level predictors" (Gelman and Hill, 2016, Chapter 12).

```{r, error = F, message = F, warning = F}

## Create proper variable names:

ds$IG_Fusion <- (ds$IGF01+ds$IGF02+ds$IGF03)/3

ds$IG_Identification <- ds$igidentification

ds$OG_Bonds <- (ds$OGI01+ds$OGI02+ds$OGI03+
               ds$OGF01+ds$OGF02+ds$OGF03)/6

ds$Empathic_concern <- (ds$empathic_concern_01+ds$empathic_concern_02+
                        ds$empathic_concern_03)/3

ds$Perspective_taking <- (ds$perspective_taking_01+ds$perspective_taking_02+
                        ds$perspective_taking_03+ds$perspective_taking_03)/4

ds$Age <- ds$age

ds$Wealth_level <- as.factor(ifelse(ds$ses == "Lower middle", 1, 
                             ifelse(ds$ses == "Middle", 2,
                             ifelse(ds$ses == "Upper middle", 3,
                             ifelse(ds$ses == "Upper", 4, "")))))

ds$Female <- as.factor(ifelse(ds$gender == "Female", 1, 0))

ds$Married <- ds$married

ds$Perception_religious_freedom <- ds$SPRF

## Varying intercept models with individual-level predictors:
m01 <- lmer(Perception_religious_freedom~IG_Fusion+IG_Identification+OG_Bonds+Empathic_concern+
              Perspective_taking+Age+Female+Married+Wealth_level+
              (1 | Country), 
            data = ds)

summary(m01)
tab_model(m01)

```

Here, marginal R sq is much higher compared to previous model. Adding individual-level predictors significantly increases explanatory power of the model. Again, evidence that most of the variation is at individual-level differences. 


```{r, error = F, message = F, warning = F, results = "hide"}

## Change class of all models so we can use stargazer():
class(m00) <- "lmerMod"
class(m01) <- "lmerMod"

## Tabulated results:
stargazer(m00, m01,
          type = "html", 
          star.cutoffs = c(0.05, 0.01, 0.001),
          out = "table1.html")

```


```{r}

htmltools::includeHTML("table1.html")

```


## Random intercept models: Imagistic predictors

```{r, error = F, message = F, warning = F}

## Varying intercept models with individual-level predictors:
m02 <- lmer(Perception_religious_freedom~Event_shared_perception+Event_episodic_recall+
              Event_reflection+Event_positive_affect+Event_negative_affect+
              Event_transformative_indiv+Event_transformative_group+
              Age+Female+Married+Wealth_level+
              (1 | Country), 
            data = ds)

summary(m02)
tab_model(m02)

```

Here, marginal R sq is much higher compared to previous model. Adding individual-level predictors significantly increases explanatory power of the model. Again, evidence that most of the variation is at individual-level differences. 


```{r, error = F, message = F, warning = F, results = "hide"}

## Change class of all models so we can use stargazer():
class(m00) <- "lmerMod"
class(m01) <- "lmerMod"
class(m02) <- "lmerMod"

## Tabulated results:
stargazer(m00, m01, m02,
          type = "html", 
          star.cutoffs = c(0.05, 0.01, 0.001),
          out = "table1.html")

```


```{r}

htmltools::includeHTML("table1.html")

```

## Histogram: Perception of Religious Freedom

```{r, error = F, message = F, warning = F}

summary(ds$SPRF)

ggplot(data = ds, 
       aes(x = SPRF)) +
  geom_histogram(color = "black",
                 bins = 20)+
  xlim(1, 7)+
  geom_textvline(label = "Mean = 5.0", 
                 xintercept = 5.0, 
                 vjust = 1.1, 
                 lwd = 1.05, 
                 linetype = 2)+
  labs(y = "Frequency",
       x = "SPRF score", 
       title = "Social Perception of Religiour Freedom")+
  theme_bw()


ggplot(data = ds, 
       aes(x = SPRF)) +
  geom_histogram(color = "black",
                 bins = 20)+
  xlim(1, 7)+
  labs(y = "Frequency",
       x = "SPRF score", 
       title = "Social Perception of Religiour Freedom")+
  facet_wrap( ~ Country, nrow = 2) +
  theme_bw()

df01 <- ds %>% drop_na(SPRF)

tbl01 <- aggregate(df01$SPRF, 
                    by=list(df01$Country),
                    FUN=mean)
tbl01$Country <- tbl01$Group.1
tbl01$SPRF <- tbl01$x
tbl01 <- tbl01[, 3:4]
tbl01

ggplot(data = df01, 
       aes(x = SPRF, 
           y = Country)) +
  geom_boxplot(color = "black",
               fill = "grey")+
  xlim(1, 7)+
  geom_textvline(label = "Mean = 4.70", 
                 xintercept = 4.70, 
                 vjust = 1.1, 
                 lwd = 1.05, 
                 linetype = 2)+
  labs(y = "",
       x = "SPRF score", 
       title = "Social Perceptions of Relgious Freedom")+
  theme_bw()

```


# **Section 3. Outcome: Experience of Religious Freedom**

## Unconditional means model

Also called "varying intercept model with no predictors" (Gelman and Hill, 2016, Chapter 12). Allows intercepts to randomly vary across countries:

```{r, error = F, message = F, warning = F}
ds$Exp_religious_freedom <- ds$Exp_religious_freedom

## Varying intercept model with no predictors:
m10<- lmer(Exp_religious_freedom ~ 1 + (1 | Country), 
           data = ds)

summary(m10)

```

Random effects:

Variance for Intercept = 0.141. This is the variance of the means across level 1 categories (countries). 
Residual = 1.7. Variance explained by level 1 residuals (everything that's not in level 1).

```{r, error = F, message = F, warning = F}

tab_model(m10)

```

We can see that ICC = 0.08. Lower ICC = low variance explained across groups. In this case, most of the variability is at individual-level (not group level). There is no significantly different patterns between countries. 

## Random intercept models

Also called "varying intercept model with individual-level predictors" (Gelman and Hill, 2016, Chapter 12).

```{r, error = F, message = F, warning = F}

## Varying intercept models with individual-level predictors:
m11 <- lmer(Exp_religious_freedom~IG_Fusion+IG_Identification+OG_Bonds+Empathic_concern+
              Perspective_taking+Age+Female+Married+Wealth_level+
              (1 | Country), 
            data = ds)

summary(m11)
tab_model(m11)

```

Here, marginal R sq is much higher compared to previous model. Adding individual-level predictors significantly increases explanatory power of the model. Again, evidence that most of the variation is at individual-level differences. 


```{r, error = F, message = F, warning = F, results = "hide"}

## Change class of all models so we can use stargazer():
class(m10) <- "lmerMod"
class(m11) <- "lmerMod"

## Tabulated results:
stargazer(m10, m11,
          type = "html", 
          star.cutoffs = c(0.05, 0.01, 0.001),
          out = "table1.html")

```


```{r}

htmltools::includeHTML("table1.html")

```


## Random intercept models: Imagistic predictors

```{r, error = F, message = F, warning = F}

## Varying intercept models with individual-level predictors:
m12 <- lmer(Exp_religious_freedom~Event_shared_perception+Event_episodic_recall+
              Event_reflection+Event_positive_affect+Event_negative_affect+
              Event_transformative_indiv+Event_transformative_group+
              Age+Female+Married+Wealth_level+
              (1 | Country), 
            data = ds)

summary(m12)
tab_model(m12)

```

Here, marginal R sq is much higher compared to previous model. Adding individual-level predictors significantly increases explanatory power of the model. Again, evidence that most of the variation is at individual-level differences. 


```{r, error = F, message = F, warning = F, results = "hide"}

## Change class of all models so we can use stargazer():
class(m10) <- "lmerMod"
class(m11) <- "lmerMod"
class(m12) <- "lmerMod"

## Tabulated results:
stargazer(m10, m11, m12,
          type = "html", 
          star.cutoffs = c(0.05, 0.01, 0.001),
          out = "table1.html")

```


```{r}

htmltools::includeHTML("table1.html")

```


## Histogram: Experience of Religious Freedom

```{r, error = F, message = F, warning = F}

df01 <- ds%>% drop_na(Exp_religious_freedom)
summary(df01$Exp_religious_freedom)

ggplot(data = df01, 
       aes(x = Exp_religious_freedom)) +
  geom_histogram(color = "black",
                 bins = 20)+
  xlim(1, 7)+
  geom_textvline(label = "Mean = 5.8", 
                 xintercept = 5.8, 
                 vjust = 1.1, 
                 lwd = 1.05, 
                 linetype = 2)+
  labs(y = "Frequency",
       x = "Exp_religious_freedom score", 
       title = "Experience of Relgious Freedom")+
  theme_bw()


ggplot(data = ds, 
       aes(x = Exp_religious_freedom)) +
  geom_histogram(color = "black",
                 bins = 20)+
  xlim(1, 7)+
  labs(y = "Frequency",
       x = "Exp_religious_freedom score", 
       title = "Experience of Religious Freedom")+
  facet_wrap( ~ Country, nrow = 2) +
  theme_bw()

df01 <- ds %>% drop_na(Exp_religious_freedom)

tbl01 <- aggregate(df01$Exp_religious_freedom, 
                    by=list(df01$Country),
                    FUN=mean)
tbl01$Country <- tbl01$Group.1
tbl01$Exp_religious_freedom <- tbl01$x
tbl01 <- tbl01[, 3:4]
tbl01

ggplot(data = df01, 
       aes(x = Exp_religious_freedom, 
           y = Country)) +
  geom_boxplot(color = "black",
               fill = "grey")+
  xlim(1, 7)+
  geom_textvline(label = "Mean = 5.8", 
                 xintercept = 5.8, 
                 vjust = 1.1, 
                 lwd = 1.05, 
                 linetype = 2)+
  labs(y = "",
       x = "Exp_religious_freedom score", 
       title = "Experience of Relgious Freedom")+
  theme_bw()

```


## **Section X: Coefficient Plots **

## Outcome: Social Perception of Religious Freedom

```{r, error = F, message = F, warning = F}

mp01 <- modelplot(m01,
                  coef_omit = 'SD (Observations)',
                  coef_rename = TRUE) +
  aes(color = ifelse(p.value < 0.05, "Significant", "Not significant")) +
  scale_color_manual(values = c("red", "blue", "black"))+
#  xlim(-3, 3)+
  labs(title = "Social perception of religious freedom", 
       x = "Coefficient estimates with95% CI")+
  geom_vline(xintercept = 0, 
             linetype = 2)

mp01


mp02 <- modelplot(m02,
                  coef_omit = 'SD (Observations)',
                  coef_rename = TRUE) +
  aes(color = ifelse(p.value < 0.05, "Significant", "Not significant")) +
  scale_color_manual(values = c("red", "blue", "black"))+
#  xlim(-3, 3)+
  labs(title = "Social perception of religious freedom", 
       x = "Coefficient estimates with95% CI")+
  geom_vline(xintercept = 0, 
             linetype = 2)

mp02

mp01a <- mp01 + theme(legend.position = "none")
ol2 <- mp01a / mp02
ol2

```


## Outcome: Experience of Religious Freedom

```{r, error = F, message = F, warning = F}

mp11 <- modelplot(m11,
                  coef_omit = 'SD (Observations)',
                  coef_rename = TRUE) +
  aes(color = ifelse(p.value < 0.05, "Significant", "Not significant")) +
  scale_color_manual(values = c("red", "blue", "black"))+
#  xlim(-3, 3)+
  labs(title = "Experience of religious freedom", 
       x = "Coefficient estimates with95% CI")+
  geom_vline(xintercept = 0, 
             linetype = 2)

mp11


mp12 <- modelplot(m12,
                  coef_omit = 'SD (Observations)',
                  coef_rename = TRUE) +
  aes(color = ifelse(p.value < 0.05, "Significant", "Not significant")) +
  scale_color_manual(values = c("red", "blue", "black"))+
#  xlim(-3, 3)+
  labs(title = "Experience of religious freedom", 
       x = "Coefficient estimates with95% CI")+
  geom_vline(xintercept = 0, 
             linetype = 2)

mp12

mp11a <- mp11 + theme(legend.position = "none")
ol2a <- mp11a / mp12
ol2a

```

# NEW ANALYSIS FOR PAPER 2 

```{r, error=F, message=F, warning=F}

## Bonds dataframe:
bonds <- cbind.data.frame(ds$IGF01, ds$IGF02, ds$IGF03,
                          ds$IGI01, ds$IGI02, ds$IGI03,
                          ds$OGF01, ds$OGF02, ds$OGF03,
                          ds$OGI01, ds$OGI02, ds$OGI03)

names(bonds) <- sub('ds\\$', '', names(bonds))

bonds <- na.omit(bonds)
mtx1 <- cor(bonds[, c(1:12)])

```

**Shorthand for item names: <br> 
IG = Ingroup, OG = Outgroup <br>
F = Fusion, I = Identification <br>
So for example: <br>
IGF01 = "ingroup fusion: item 1" <br>
OGI03 = "outgroup identification: item 3", and so on **

```{r, error = F, message = F, warning = F}
corrplot(mtx1, method = "number", number.cex = 0.7,
         col=c("white", "darkred", "red",
               "darkgrey", "blue", "darkblue"))

```

## KMO and Bartlett's test

```{r, error = F, message=F, warning=F}

KMO(r=cor(bonds))

cortest.bartlett(bonds)

```


## Parallel test

```{r, warning=F, message=F}

scree(bonds)
# parallel <- fa.parallel(bonds)

```

Scree plot suggests a two factor structure. We will proceed with promax rotation, which assumes that the items are inter-correlated (that is, not independent from each other). 

## Two factor model 

```{r, warning=F, message=F}

fit02 <- factanal(bonds, 2, rotation="promax")
fit02

```

We want to split the ingroup/outgroup fusion/identification items into distinct factors. We can examine what the three and four factor solutions looks like.

## Three factor model 

```{r, warning=F, message=F}

fit03 <- factanal(bonds, 3, rotation="promax")
fit03

```

## Four factor model

```{r, warning=F, message=F}

fit04 <- factanal(bonds, 4, rotation="promax")
fit04
```




## Outgroup measures only:

```{r, error=F, message=F, warning=F}

## Bonds dataframe:
bonds <- cbind.data.frame(ds$OGF01, ds$OGF02, ds$OGF03,
                          ds$OGI01, ds$OGI02, ds$OGI03)

names(bonds) <- sub('ds\\$', '', names(bonds))

bonds <- na.omit(bonds)
mtx1 <- cor(bonds[, c(1:6)])

```

**Shorthand for item names: <br> 
IG = Ingroup, OG = Outgroup <br>
F = Fusion, I = Identification <br>
So for example: <br>
IGF01 = "ingroup fusion: item 1" <br>
OGI03 = "outgroup identification: item 3", and so on **

```{r, error = F, message = F, warning = F}
corrplot(mtx1, method = "number", number.cex = 0.7,
         col=c("white", "darkred", "red",
               "darkgrey", "blue", "darkblue"))

```

## KMO and Bartlett's test

```{r, error = F, message=F, warning=F}

KMO(r=cor(bonds))

cortest.bartlett(bonds)

```


## Parallel test

```{r, warning=F, message=F}

scree(bonds)
# parallel <- fa.parallel(bonds)

```

Scree plot suggests a two factor structure. We will proceed with promax rotation, which assumes that the items are inter-correlated (that is, not independent from each other). 

## Two factor model 

```{r, warning=F, message=F}

fit02 <- factanal(bonds, 2, rotation="promax")
fit02

```


## Ingroup measures only:

```{r, error=F, message=F, warning=F}

## Bonds dataframe:
bonds <- cbind.data.frame(ds$IGF01, ds$IGF02, ds$IGF03,
                          ds$IGI01, ds$IGI02, ds$IGI03)

names(bonds) <- sub('ds\\$', '', names(bonds))

bonds <- na.omit(bonds)
mtx1 <- cor(bonds[, c(1:6)])

```



```{r, error = F, message = F, warning = F}
corrplot(mtx1, method = "number", number.cex = 0.7,
         col=c("white", "darkred", "red",
               "darkgrey", "blue", "darkblue"))

```

## KMO and Bartlett's test

```{r, error = F, message=F, warning=F}

KMO(r=cor(bonds))

cortest.bartlett(bonds)

```


## Parallel test

```{r, warning=F, message=F}
scree(bonds)
```

## Two factor model 

```{r, warning=F, message=F}

fit02 <- factanal(bonds, 2, rotation="promax")
fit02

```

# **Section 16. Imagistic Experience: Factor analysis**

```{r, error = F, message = F, warning = F}

ds <- fread("~/Desktop/dsCFA.csv")

imagistic <- cbind.data.frame(ds$event_negative_affect, ds$event_positive_affect, 
                              ds$event_episodic_recall_01, ds$event_episodic_recall_02,
                              ds$event_shared_perception_01, ds$event_shared_perception_02,
                              ds$event_event_reflection_01, ds$event_event_reflection_02,
                              ds$event_transformative_indiv_01, ds$event_transformative_indiv_02,
                              ds$event_transformative_group_01, ds$event_transformative_group_02)

imagistic <- na.omit(imagistic)

names(imagistic) <- sub('ds\\$event\\_', '', names(imagistic))

# mtx <- cor(imagistic[, c(1:12)])

# corrplot(mtx, method = "number", number.cex = 0.7,
#         col=c("white", "darkred", "red",
#               "darkgrey", "blue", "darkblue"))

```


## Imagistic experience: Factor analysis

```{r, error = F, message = F, warning = F}

## Kaiser-Meyer-Olkin (KMO) test of factorability
#KMO(r=cor(imagistic))

## Bartlett's test of sphericity
#cortest.bartlett(imagistic)

## Parallel test
# parallel <- fa.parallel(imagistic)

```

Scree plot suggests there needs to be three factors, but theoretically we want six factors. Here is how the three factors break down:

```{r, error = F, message = F, warning = F}

fit03 <- factanal(imagistic, 3, rotation="promax")
fit03

```

The factor structure above makes sense but is a little incoherent. Here is what happens if we "force" six factors:

```{r, error = F, message = F, warning = F}

fit06 <- factanal(imagistic, 6, rotation="promax")
fit06

```


## Imagistic experience: Reliability

```{r, error = F, message = F, warning = F}

imagistic <- cbind.data.frame(ds$event_negative_affect, ds$event_positive_affect, 
                              ds$event_episodic_recall_01, ds$event_episodic_recall_02,
                              ds$event_shared_perception_01, ds$event_shared_perception_02,
                              ds$event_event_reflection_01, ds$event_event_reflection_02,
                              ds$event_transformative_indiv_01, ds$event_transformative_indiv_02,
                              ds$event_transformative_group_01, ds$event_transformative_group_02)


## Reliability:
alph01 <- psych::alpha(imagistic)
alph01

```

## Imagistic experience: Visualization

If we conceptualize "imagistic experience" as a single measure that is the sum of the six scales, here is the visualization of the measure:

```{r, error = F, message = F, warning = F}

ds$imagistic <- (((ds$event_positive_affect)+
                 (ds$event_negative_affect)+ 
                ((ds$event_episodic_recall_01+ds$event_episodic_recall_02)/2)+
                ((ds$event_shared_perception_01+ds$event_shared_perception_02)/2)+
                ((ds$event_event_reflection_01+ds$event_event_reflection_02)/2)+
                ((ds$event_transformative_indiv_01+ds$event_transformative_indiv_02)/2)+
                ((ds$event_transformative_group_01+ds$event_transformative_group_02)/2)))

summary(ds$imagistic)

ds %>% drop_na(imagistic)%>%
ggplot(aes(x = imagistic))+
  geom_histogram(color = "black",
                 fill = "gray",
                 bins = 50)+
  geom_textvline(label = "Mean = 32.00", 
                 xintercept = 32.00, 
                 vjust = 1.1, 
                 lwd = 1.05, 
                 linetype = 2)+
  labs(x = "Imagistic experience", 
       y = "Frequency", 
       title = "Imagistic experience: Gambia")+
  theme_bw()


```

# **Section 17. Imagistic experience: sub-scales**

Below are the individual Cronbach's alpha for each of the seven subscales, followed by their individual visualizations, followed by the correlation between the seven sub-scales

## Negative affect about event 

```{r, error = F, message = F, warning = F}

## Positive affect:
negative_affect <- cbind.data.frame(ds$event_negative_affect)
negative_affect <- na.omit(negative_affect)

## Visualization:
ds$event_negative_affect <- (ds$event_negative_affect)
summary(ds$event_negative_affect)

ds %>% drop_na(event_negative_affect)%>%
ggplot(aes(x = event_negative_affect))+
  geom_histogram(color = "black",
                 fill = "gray",
                 bins = 50)+
  geom_textvline(label = "Mean = 5.30", 
                 xintercept = 5.30, 
                 vjust = 1.1, 
                 lwd = 1.05, 
                 linetype = 2)+
  labs(x = "Negative affect about event", 
       y = "Frequency", 
       title = "Negative affect about event: Gambia")+
  theme_bw()


```

## Positive affect about event 

```{r, error = F, message = F, warning = F}

## Positive affect:
positive_affect <- cbind.data.frame(ds$event_positive_affect)
positive_affect <- na.omit(positive_affect)

## Visualization:
ds$event_positive_affect <- (ds$event_positive_affect)
summary(ds$event_positive_affect)

ds %>% drop_na(event_positive_affect)%>%
ggplot(aes(x = event_positive_affect))+
  geom_histogram(color = "black",
                 fill = "gray",
                 bins = 50)+
  geom_textvline(label = "Mean = 3.30", 
                 xintercept = 3.30, 
                 vjust = 1.1, 
                 lwd = 1.05, 
                 linetype = 2)+
  labs(x = "Positive affect about event", 
       y = "Frequency", 
       title = "Positive affect about event: Gambia")+
  theme_bw()


```

## Episodic recall of event 

```{r, error = F, message = F, warning = F}

## Episodic recall:
episodic_recall <- cbind.data.frame(ds$event_episodic_recall_01, ds$event_episodic_recall_02)
episodic_recall <- na.omit(episodic_recall)

names(episodic_recall) <- sub('ds\\$event\\_', '', names(episodic_recall))

mtx <- cor(episodic_recall[, c(1:2)])

## Correlation plot:
corrplot(mtx, method = "number", number.cex = 0.7,
         col=c("white", "darkred", "red",
               "darkgrey", "blue", "darkblue"))

## Reliability:
alph01 <- psych::alpha(episodic_recall)
summary(alph01)

## Visualization:
ds$event_episodic_recall <- ((ds$event_episodic_recall_01+ds$event_episodic_recall_02)/2)
summary(ds$event_episodic_recall)

ds %>% drop_na(event_episodic_recall)%>%
ggplot(aes(x = event_episodic_recall))+
  geom_histogram(color = "black",
                 fill = "gray",
                 bins = 50)+
  geom_textvline(label = "Mean = 5.60", 
                 xintercept = 5.60, 
                 vjust = 1.1, 
                 lwd = 1.05, 
                 linetype = 2)+
  labs(x = "Episodic recall of event", 
       y = "Frequency", 
       title = "Episodic recall of event: Gambia")+
  theme_bw()


```


## Shared perception of event 

```{r, error = F, message = F, warning = F}

## Shared perception:
shared_perception <- cbind.data.frame(ds$event_shared_perception_01, ds$event_shared_perception_02)
shared_perception <- na.omit(shared_perception)

names(shared_perception) <- sub('ds\\$event\\_', '', names(shared_perception))

mtx <- cor(shared_perception[, c(1:2)])

## Correlation plot:
corrplot(mtx, method = "number", number.cex = 0.7,
         col=c("white", "darkred", "red",
               "darkgrey", "blue", "darkblue"))

## Reliability:
alph01 <- psych::alpha(shared_perception)
summary(alph01)

## Visualization:
ds$event_shared_perception <- ((ds$event_shared_perception_01+ds$event_shared_perception_02)/2)
summary(ds$event_shared_perception)

ds %>% drop_na(event_shared_perception)%>%
ggplot(aes(x = event_shared_perception))+
  geom_histogram(color = "black",
                 fill = "gray",
                 bins = 50)+
  geom_textvline(label = "Mean = 5.70", 
                 xintercept = 5.70, 
                 vjust = 1.1, 
                 lwd = 1.05, 
                 linetype = 2)+
  labs(x = "Shared perception of event", 
       y = "Frequency", 
       title = "Shared perception of event: Gambia")+
  theme_bw()


```


## Reflection of event 

```{r, error = F, message = F, warning = F}

## Reflection:
event_reflection <- cbind.data.frame(ds$event_event_reflection_01, ds$event_event_reflection_02)
event_reflection <- na.omit(event_reflection)

names(event_reflection) <- sub('ds\\$event\\_', '', names(event_reflection))

mtx <- cor(event_reflection[, c(1:2)])

## Correlation plot:
corrplot(mtx, method = "number", number.cex = 0.7,
         col=c("white", "darkred", "red",
               "darkgrey", "blue", "darkblue"))

## Reliability:
alph01 <- psych::alpha(event_reflection)
summary(alph01)

## Visualization:
ds$event_event_reflection <- ((ds$event_event_reflection_01+ds$event_event_reflection_02)/2)
summary(ds$event_event_reflection)

ds %>% drop_na(event_event_reflection)%>%
ggplot(aes(x = event_event_reflection))+
  geom_histogram(color = "black",
                 fill = "gray",
                 bins = 50)+
  geom_textvline(label = "Mean = 3.90", 
                 xintercept = 3.90, 
                 vjust = 1.1, 
                 lwd = 1.05, 
                 linetype = 2)+
  labs(x = "Reflection of event", 
       y = "Frequency", 
       title = "Reflection of event: Gambia")+
  theme_bw()


```


## Transformative event for individual 

```{r, error = F, message = F, warning = F}

## Reflection:
event_transformative_indiv <- cbind.data.frame(ds$event_transformative_indiv_01, ds$event_transformative_indiv_02)

event_transformative_indiv <- na.omit(event_transformative_indiv)

names(event_transformative_indiv) <- sub('ds\\$event\\_', '', names(event_transformative_indiv))

mtx <- cor(event_transformative_indiv[, c(1:2)])

## Correlation plot:
corrplot(mtx, method = "number", number.cex = 0.7,
         col=c("white", "darkred", "red",
               "darkgrey", "blue", "darkblue"))

## Reliability:
psych::alpha(event_transformative_indiv)

## Visualization:
ds$event_transformative_indiv <- ((ds$event_transformative_indiv_01+ds$event_transformative_indiv_02)/2)
summary(ds$event_transformative_indiv)

ds %>% drop_na(event_transformative_indiv)%>%
ggplot(aes(x = event_transformative_indiv))+
  geom_histogram(color = "black",
                 fill = "gray",
                 bins = 50)+
  geom_textvline(label = "Mean = 3.70", 
                 xintercept = 3.70, 
                 vjust = 1.1, 
                 lwd = 1.05, 
                 linetype = 2)+
  labs(x = "Transformative event score", 
       y = "Frequency", 
       title = "Transformative event for individual: Gambia")+
  theme_bw()


```

## Transformative event for group 

```{r, error = F, message = F, warning = F}

event_transformative_group <- cbind.data.frame(ds$event_transformative_group_01, ds$event_transformative_group_02)
event_transformative_group <- na.omit(event_transformative_group)

names(event_transformative_group) <- sub('ds\\$event\\_', '', names(event_transformative_group))

mtx <- cor(event_transformative_group[, c(1:2)])

## Correlation plot:
corrplot(mtx, method = "number", number.cex = 0.7,
         col=c("white", "darkred", "red",
               "darkgrey", "blue", "darkblue"))

## Reliability:
alph01 <- psych::alpha(event_transformative_group)
summary(alph01)

## Visualization:
ds$event_transformative_group <- ((ds$event_transformative_group_01+ds$event_transformative_group_02)/2)
summary(ds$event_transformative_group)

ds %>% drop_na(event_transformative_group)%>%
ggplot(aes(x = event_transformative_group))+
  geom_histogram(color = "black",
                 fill = "gray",
                 bins = 50)+
  geom_textvline(label = "Mean = 4.20", 
                 xintercept = 4.20, 
                 vjust = 1.1, 
                 lwd = 1.05, 
                 linetype = 2)+
  labs(x = "Transformative event score", 
       y = "Frequency", 
       title = "Transformative event for group: Gambia")+
  theme_bw()


```


## Correlation between seven subscales

```{r}

imagistic_subscales <- cbind.data.frame(ds$event_positive_affect, ds$event_negative_affect,
                                        ds$event_episodic_recall, 
                                        ds$event_shared_perception, ds$event_event_reflection, 
                                        ds$event_transformative_indiv, ds$event_transformative_group)

imagistic_subscales <- na.omit(imagistic_subscales)

names(imagistic_subscales) <- sub('ds\\$event\\_', '', names(imagistic_subscales))

mtx <- cor(imagistic_subscales[, c(1:6)])

## Correlation plot:
corrplot(mtx, method = "number", number.cex = 0.7,
         col=c("white", "darkred", "red",
               "darkgrey", "blue", "darkblue"))

```




