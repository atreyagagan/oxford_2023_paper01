dsgmb <- fread("~/Dropbox/2023_Gagan/Paper02/data/dsgmb.csv")
Correct asterisk pattern for stargazer tables:
starpattern <- "<em>&#42;p&lt;0.05;&nbsp;&#42;&#42;p&lt;0.01;&nbsp;&#42;&#42;&#42;p&lt;0.001</em>"
## Install "pacman" package if not installed
# (remove the # symbol from the line below):
# install.packages("pacman")
## Load R packages:
pacman::p_load(data.table, tidyverse, haven, labelled, vtable,
psych, scales, weights, clipr, forcats,
stargazer, ggthemes, ggcharts, geomtextpath,
corrplot, tm, readxl, patchwork, modelsummary,
gt, lme4, car, lmerTest, lavaan,
ggeffects, magrittr, broom, broom.mixed,
backports, effects, interactions, plyr, sjPlot)
## Import datasets. These are cleaned datasets with variables created and named in the individual country R scripts:
# Gambia:
dsgmb <- fread("~/Dropbox/2023_Gagan/Paper02/data/dsgmb.csv")
setwd("/Users/ckava/Library/CloudStorage/Dropbox-Personal/2023 Gagan/Paper02")
dsgmb <- fread("~/Dropbox/2023_Gagan/Paper02/data/dsgmb.csv")
# Update the file paths:
dsgmb <- fread("/Users/ckava/Library/CloudStorage/Dropbox-Personal/2023 Gagan/Paper02/data/dsgmb.csv")
dspak <- fread("/Users/ckava/Library/CloudStorage/Dropbox-Personal/2023 Gagan/Paper02/data/dspak.csv")
dstza <- fread("/Users/ckava/Library/CloudStorage/Dropbox-Personal/2023 Gagan/Paper02/data/dstza.csv")
dsuga <- fread("/Users/ckava/Library/CloudStorage/Dropbox-Personal/2023 Gagan/Paper02/data/dsuga.csv")
# Combine into one dataset:
ds <- rbind(dsgmb, dspak, dstza, dsuga)
ds$gender <- ifelse(ds$gender == "Male", "Male",
ifelse(ds$gender == "Female", "Female", NA))
## ses:
ds$ses <- ifelse(ds$ses == "", NA, ds$ses)
## Religion:
ds$religion <- ifelse(ds$religion == "", NA, ds$religion)
ds$religion <- ifelse(ds$religion == "Christian (Catholic)", "Christian: Catholic",
ifelse(ds$religion == "Christian (Protestant)", "Christian: Protestant",
ifelse(ds$religion == "Muslim (Shia)", "Muslim: Shia",
ifelse(ds$religion == "Muslim (Sunni)", "Muslim: Sunni", ds$religion))))
## Marital status
ds$married <- ifelse(ds$married == "Not married", "Unmarried", ds$married)
ds$married <- ifelse(ds$married == "", NA, ds$married)
## Separate into individual country datasets:
dsgmb <- ds[ds$country == "Gambia", ]
dspak <- ds[ds$country == "Pakistan", ]
dstza <- ds[ds$country == "Tanzania", ]
dsuga <- ds[ds$country == "Uganda", ]
```
variable.names(ds)
missing_ds <- map(dsgmb, ~mean(is.na(.))*100)
missing_ds <- as.data.frame(missing_ds)
missing_ds <- as_tibble(cbind(variable = names(missing_ds), t(missing_ds)))
missing_ds$percent_missing <- missing_ds$V2
missing_ds$percent_missing <- as.numeric(missing_ds$percent_missing)
missing_ds <- select(missing_ds,-c(2))
missing_ds <- as.data.frame(missing_ds)
missing_ds$percent_missing <- as.numeric(missing_ds$percent_missing)
missing_ds <- as.data.table(missing_ds)
missing_ds_01 <- missing_ds[1:31,]
missing_ds_02 <- missing_ds[32:61,]
lp01 <- missing_ds_01 %>%
lollipop_chart(x = variable,
y = percent_missing,
line_color = "black",
point_color = "black")+
labs(y = "% missing data",
x = "",
title = "Gambia")+
theme_bw()
lp02 <- missing_ds_02 %>%
lollipop_chart(x = variable,
y = percent_missing,
line_color = "black",
point_color = "black")+
labs(y = "% missing data",
x = "",
title = "")+
theme_bw()
lp01| lp02
```
variable.names(ds)
wd
write.csv(ds, file = "/Users/ckava/Library/CloudStorage/Dropbox-Personal/2023 Gagan/Paper02/data/dataset_for_jasp.csv", row.names = FALSE)
# Identify relevant columns
relevant_columns <- grep("^IG|^END|^event_", names(ds), value = TRUE)
# Calculate SD for each row
ds$sd_score = apply(ds[, relevant_columns], 1, sd, na.rm = TRUE)
# Identify relevant columns
relevant_columns <- grep("^IG|^END|^event_", names(ds), value = TRUE)
# Calculate SD for each row using the correct data.table syntax
ds[, sd_score := apply(.SD, 1, sd, na.rm = TRUE), .SDcols = ..relevant_columns]
# Identify relevant columns
relevant_columns <- grep("^IG|^END|^event_", names(ds), value = TRUE)
# Calculate SD for each row
# Use setDT to ensure ds is treated as a data.table
setDT(ds)[, sd_score := apply(.SD, 1, sd, na.rm = TRUE), .SDcols = relevant_columns]
# Identify rows with SD < 1
low_quality_responses <- ds[sd_score < 1, ]
View(low_quality_responses)
variable.names(ds)
# Assuming 'ds' is your original data.table and 'sd_score' is the column with the calculated standard deviations
# Create a subset excluding low quality responses
high_quality_ds <- ds[sd_score >= 1, ]
write.csv(high_quality_ds, file = "/Users/ckava/Library/CloudStorage/Dropbox-Personal/2023 Gagan/Paper02/data/HQdataset_for_jasp.csv", row.names = FALSE)
View(dsuga)
View(dsuga)
event_variables <- c(
"event_episodic_recall_01",
"event_episodic_recall_02",
"event_shared_perception_01",
"event_shared_perception_02",
"event_reflection_01",
"event_reflection_02",
"event_transformative_indiv_01",
"event_transformative_indiv_02",
"event_transformative_group_01",
"event_transformative_group_02"
)
# Install and load the psych package if not already installed
install.packages("psych")
library(psych)
# Assuming your dataset is named 'your_data_frame' and you have selected the relevant 'event_' variables
event_variables <- c(
"event_episodic_recall_01",
"event_episodic_recall_02",
"event_shared_perception_01",
"event_shared_perception_02",
"event_reflection_01",
"event_reflection_02",
"event_transformative_indiv_01",
"event_transformative_indiv_02",
"event_transformative_group_01",
"event_transformative_group_02"
)
# Create a subset of the data with the selected event variables
event_data <- your_data_frame[event_variables]
install.packages("psych")
# Install and load the psych package if not already installed
install.packages("psych")
library(psych)
# Assuming your dataset is named 'your_data_frame' and you have selected the relevant 'event_' variables
event_variables <- c(
"event_episodic_recall_01",
"event_episodic_recall_02",
"event_shared_perception_01",
"event_shared_perception_02",
"event_reflection_01",
"event_reflection_02",
"event_transformative_indiv_01",
"event_transformative_indiv_02",
"event_transformative_group_01",
"event_transformative_group_02"
)
# Create a subset of the data with the selected event variables
event_data <- ds[event_variables]
install.packages("psych")
# Create a subset of the data with the selected event variables
event_data <- ds[event_variables]
# Convert the data.table to a data frame
event_data_frame <- as.data.frame(ds)
# Select the relevant event variables
event_data_frame <- event_data_frame[, event_variables]
# Load the psych package
library(psych)
# Perform the Exploratory Factor Analysis (EFA)
efa_result <- fa(event_data_frame, nfactors = NA)
# Convert the data.table to a data frame
event_data_frame <- as.data.frame(ds)
# Select the relevant event variables
event_data_frame <- event_data_frame[, event_variables]
# Load the psych package
library(psych)
# Determine the number of factors using a criterion (e.g., parallel analysis)
# You can replace "parallel" with other methods like "minres," "ml," etc.
efa_result <- fa(event_data_frame, nfactors = "parallel")
# Load the psych package
library(psych)
# Select the relevant variables you want to include in the EFA
# Replace "all_variables" with the actual list of variable names you want to include
all_variables <- c("event_episodic_recall_01", "event_episodic_recall_02",
"event_shared_perception_01", "event_shared_perception_02",
"event_reflection_01", "event_reflection_02",
"event_transformative_indiv_01", "event_transformative_indiv_02",
"event_transformative_group_01", "event_transformative_group_02"
)
# Subset your data frame to include only the selected variables
selected_data <- ds[all_variables]
# Convert the data.table to a data frame
event_data_frame <- as.data.frame(ds)
# Select the relevant event variables
event_data_frame <- event_data_frame[, all_variables]
# Load the psych package
library(psych)
# Perform the Exploratory Factor Analysis (EFA) without specifying the number of factors
efa_result <- fa(event_data_frame)
# Print the EFA results
print(efa_result)
https://rikkyo-ac-jp.zoom.us/j/7436267310?pwd=dFZYQzJlWUs5a0F5cmwyQ0FlMWE5UT09
# Perform the Exploratory Factor Analysis (EFA) with promax rotation
efa_result_promax <- fa(selected_data, rotate = "promax")
# Perform the Exploratory Factor Analysis (EFA) with promax rotation
efa_result_promax <- fa(selected_data, rotate = "promax")
# Load the psych package
library(psych)
# Assuming your dataset is named 'your_data_frame' and you have selected the relevant 'event_' variables
event_variables <- c(
"event_episodic_recall_01",
"event_episodic_recall_02",
"event_shared_perception_01",
"event_shared_perception_02",
"event_reflection_01",
"event_reflection_02",
"event_transformative_indiv_01",
"event_transformative_indiv_02",
"event_transformative_group_01",
"event_transformative_group_02"
)
# Create a subset of the data with the selected event variables
event_data <- your_data_frame[event_variables]
# Load the psych package
library(psych)
# Assuming your dataset is named 'your_data_frame' and you have selected the relevant 'event_' variables
event_variables <- c(
"event_episodic_recall_01",
"event_episodic_recall_02",
"event_shared_perception_01",
"event_shared_perception_02",
"event_reflection_01",
"event_reflection_02",
"event_transformative_indiv_01",
"event_transformative_indiv_02",
"event_transformative_group_01",
"event_transformative_group_02"
)
# Create a subset of the data with the selected event variables
event_data <- ds[event_variables]
# Load the psych package
library(psych)
# Define the selected event-related variables for the EFA
selected_variables <- c(
"event_episodic_recall_01",
"event_episodic_recall_02",
"event_shared_perception_01",
"event_shared_perception_02",
"event_reflection_01",
"event_reflection_02",
"event_transformative_indiv_01",
"event_transformative_indiv_02",
"event_transformative_group_01",
"event_transformative_group_02"
)
# Subset the 'ds' dataset to include only the selected variables
selected_data <- ds[selected_variables]
# Load the psych package
library(psych)
# Convert the 'ds' data.table to a data frame
ds_data_frame <- as.data.frame(ds)
# Define the selected event-related variables for the EFA
selected_variables <- c(
"event_episodic_recall_01",
"event_episodic_recall_02",
"event_shared_perception_01",
"event_shared_perception_02",
"event_reflection_01",
"event_reflection_02",
"event_transformative_indiv_01",
"event_transformative_indiv_02",
"event_transformative_group_01",
"event_transformative_group_02"
)
# Subset the data frame to include only the selected variables
selected_data <- ds_data_frame[selected_variables]
# Perform the 3-factor Exploratory Factor Analysis (EFA) with promax rotation
efa_result_3factors <- fa(selected_data, nfactors = 3, rotate = "promax")
# Print the EFA results for the 3-factor solution with promax rotation
print(efa_result_3factors)
# Load the psych package
library(psych)
# Define the selected event-related variables for the EFA
selected_variables <- c(
"event_episodic_recall_01",
"event_episodic_recall_02",
"event_shared_perception_01",
"event_shared_perception_02",
"event_reflection_01",
"event_reflection_02",
"event_transformative_indiv_01",
"event_transformative_indiv_02",
"event_transformative_group_01",
"event_transformative_group_02"
)
# Subset the 'ds' dataset to include only the selected variables
selected_data <- ds[selected_variables]
# Load the psych package
library(psych)
# Define the selected event-related variables for the EFA
selected_variables <- c(
"event_episodic_recall_01",
"event_episodic_recall_02",
"event_shared_perception_01",
"event_shared_perception_02",
"event_reflection_01",
"event_reflection_02",
"event_transformative_indiv_01",
"event_transformative_indiv_02",
"event_transformative_group_01",
"event_transformative_group_02"
)
# Create a data frame with the selected variables from 'ds'
selected_data <- as.data.frame(ds[, ..selected_variables])
# Perform the 3-factor Exploratory Factor Analysis (EFA) with promax rotation
efa_result_3factors <- fa(selected_data, nfactors = 3, rotate = "promax")
# Print the EFA results for the 3-factor solution with promax rotation
print(efa_result_3factors)
# Load the psych package
library(psych)
# Define the selected event-related variables for the EFA
selected_variables <- c(
"event_episodic_recall_01",
"event_episodic_recall_02",
"event_shared_perception_01",
"event_shared_perception_02",
"event_reflection_01",
"event_reflection_02",
"event_transformative_indiv_01",
"event_transformative_indiv_02",
"event_transformative_group_01",
"event_transformative_group_02"
)
# Create a data frame with the selected variables from 'ds'
selected_data <- as.data.frame(ds[, ..selected_variables])
# Perform the 3-factor Exploratory Factor Analysis (EFA) with promax rotation
efa_result_3factors <- fa(selected_data, nfactors = 4, rotate = "promax")
# Print the EFA results for the 4-factor solution with promax rotation
print(efa_result_3factors)
imagistic <- cbind.data.frame(ds$event_episodic_recall_01, ds$event_episodic_recall_02,
ds$event_shared_perception_01, ds$event_shared_perception_02,
ds$event_reflection_01, ds$event_reflection_02,
ds$event_transformative_indiv_01, ds$event_transformative_indiv_02,
ds$event_transformative_group_02)
imagistic <- na.omit(imagistic)
names(imagistic) <- sub('ds\\$event\\_', '', names(imagistic))
mtx <- cor(imagistic[, c(1:9)])
ion
imagistic <- cbind.data.frame(ds$event_episodic_recall_01, ds$event_episodic_recall_02,
ds$event_shared_perception_01, ds$event_shared_perception_02,
ds$event_reflection_01, ds$event_reflection_02,
ds$event_transformative_indiv_01, ds$event_transformative_indiv_02,
ds$event_transformative_group_02)
imagistic <- na.omit(imagistic)
names(imagistic) <- sub('ds\\$event\\_', '', names(imagistic))
mtx <- cor(imagistic[, c(1:9)])
fit04 <- factanal(imagistic, 4, rotation="promax")
print(fit04$loadings, cutoff = 0.35)
imagistic <- cbind.data.frame(ds$event_episodic_recall_01, ds$event_episodic_recall_02,
ds$event_shared_perception_01, ds$event_shared_perception_02,
ds$event_reflection_01, ds$event_reflection_02, ds$event_transformative_indiv_02,
ds$event_transformative_group_02)
imagistic <- na.omit(imagistic)
names(imagistic) <- sub('ds\\$event\\_', '', names(imagistic))
mtx <- cor(imagistic[, c(1:9)])
imagistic <- cbind.data.frame(ds$event_episodic_recall_01, ds$event_episodic_recall_02,
ds$event_shared_perception_01, ds$event_shared_perception_02,
ds$event_reflection_01, ds$event_reflection_02, ds$event_transformative_indiv_02,
ds$event_transformative_group_02)
imagistic <- na.omit(imagistic)
names(imagistic) <- sub('ds\\$event\\_', '', names(imagistic))
mtx <- cor(imagistic[, c(1:8)])
fit04 <- factanal(imagistic, 4, rotation="promax")
print(fit04$loadings, cutoff = 0.35)
fit04 <- factanal(imagistic, 4, rotation="promax")
print(fit04$loadings, cutoff = 0.30)
imagistic <- cbind.data.frame(ds$event_episodic_recall_01, ds$event_episodic_recall_02,
ds$event_shared_perception_01, ds$event_shared_perception_02,
ds$event_reflection_01, ds$event_reflection_02, ds$event_transformative_indiv_02,ds$event_transformative_indiv_01
)
imagistic <- na.omit(imagistic)
names(imagistic) <- sub('ds\\$event\\_', '', names(imagistic))
mtx <- cor(imagistic[, c(1:8)])
fit04 <- factanal(imagistic, 4, rotation="promax")
print(fit04$loadings, cutoff = 0.30)
# Load the required package (if not already loaded)
library(rNuggets)
install.packages("rNuggets")
help(spearman_brown)
fourfacs <- 'Reflection =~ reflection_01+reflection_02
Vivid_recall =~ episodic_recall_01+episodic_recall_02
Perceived shareness =~ shared_perception_01+shared_perception_02
Defining_experience =~ transformative_indiv_02+transformative_group_02'
cfa04 <- cfa(fourfacs,
data=imagistic,
std.lv=TRUE)
variable.names(ds)
variable.names(ds)
> # Update the file paths:
# Update the file paths:
> dsgmb <- fread("/Users/ckava/Library/CloudStorage/Dropbox-Personal/2023 Gagan/Paper02/data/dsgmb.csv")
> dsgmb <- fread("/Users/ckava/Library/CloudStorage/Dropbox-Personal/2023 Gagan/Paper02/data/dsgmb.csv")
dsgmb <- fread("/Users/ckava/Library/CloudStorage/Dropbox-Personal/2023 Gagan/Paper02/data/dsgmb.csv")
dspak <- fread("/Users/ckava/Library/CloudStorage/Dropbox-Personal/2023 Gagan/Paper02/data/dspak.csv")
dstza <- fread("/Users/ckava/Library/CloudStorage/Dropbox-Personal/2023 Gagan/Paper02/data/dstza.csv")
dsuga <- fread("/Users/ckava/Library/CloudStorage/Dropbox-Personal/2023 Gagan/Paper02/data/dsuga.csv")
> # Combine into one dataset:
ds2 <- rbind(dsgmb, dspak, dstza, dsuga)
View(ds2)
variable.names(ds2)
